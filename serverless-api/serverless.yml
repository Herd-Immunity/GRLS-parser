org: layonez
app: vaccination-handbook-api-app
service: vaccination-handbook-api-app
region: eu-north-1

frameworkVersion: "2"

plugins:
  - serverless-aws-documentation

custom:
  vaccinesTableName: "vaccines-table-${self:provider.stage}"
  infectionsTableName: "infections-table-${self:provider.stage}"
  contraindicationsTableName: "contraindications-table-${self:provider.stage}"
  # You must have the documentation object
  documentation:
    # this is general info about the API
    api:
      info:
        version: "2"
        title: Example API
        description: Some example API
        termsOfService: https://www.google.com
        contact:
          name: The contact person
          url: https://www.serverless.com/framework
          email: some-fake@email.com
        license:
          name: The license
          url: https://www.github.com
      tags:
        - name: Vaccines
          description: The first tag
        - name: Tag2
          description: That other tag that we all love
    # Now we describe all the models that we use
    models:
      - name: MessageResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            message:
              type: string
      - name: DoSomethingRequest
        contentType: "application/json"
        schema:
          type: array
          items:
            type: string
      - name: DoSomethingResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            result:
              type: string
            submittedItems:
              type: number
      - name: 400JsonResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            message:
              type: string
            statusCode:
              type: number
  commonModelSchemaFragments:
    # defining common fragments means you can reference them with a single line
    MethodResponse400Json:
      statusCode: "400"
      responseModels:
        "application/json": 400JsonResponse

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: "20201221"
  stage: dev
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [VaccinesTable, Arn]
            - Fn::GetAtt: [InfectionsTable, Arn]
            - Fn::GetAtt: [ContraindicationsTable, Arn]
  environment:
    VACCINES_TABLE: ${self:custom.vaccinesTableName}
    INFECTIONS_TABLE: ${self:custom.infectionsTableName}
    CONTRAINDICATIONS_TABLE: ${self:custom.contraindicationsTableName}

functions:
  api:
    handler: handler.handler
    events:
      - http:
          path: /
          method: ANY
      - http:
          path: /{proxy+}
          method: ANY

      # - http:
      #     path: /GetVaccinesList
      #     method: get
      #     documentation:
      #       summary: Gets a simple message
      #       tags:
      #         - Vaccines
      #       description: >
      #         Get complete list of id vaccines
      #       methodResponses:
      #         - statusCode: "200"
      #           responseModels:
      #             "application/json": MessageResponse

resources:
  Resources:
    VaccinesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.vaccinesTableName}
    InfectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.infectionsTableName}
    ContraindicationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.contraindicationsTableName}
